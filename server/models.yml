users:
  name: text
  bio: text
  location: text
  links: text
  email:
    type: text
    unique: true
    required: true
    private: true
    no_patch: true

  has_payment_user:
    type: boolean
    required: true
    default: false

  password:
    type: bytea
    required: true
    server_private: true
  profile_photo_version:
    type: text
    no_patch: true
  forgot_password_token:
    type: bytea
    server_private: true

  general_search_vector:
    type: tsvector
    includes:
      - name
      - bio

projects:
  name: text
  description: text

  story: text
  upload_images:
    type: text[]
    no_patch: true

  user_id:
    type: bigint
    required: true
    references: users(id)
    server_private: true

  general_search_vector:
    type: tsvector
    includes:
      - name
      - description


project_pledges:
  url_slug: false

  project_id:
    type: bigint
    required: true
    references: projects(id)
    server_private: true
  user_id:
    type: bigint
    required: true
    references: users(id)
    server_private: true

  amount:
    type: bigint
    required: true
    server_private: true

  state:
    type: enum(UNPAID, PAID, RELEASED)
    default: UNPAID
    required: true
    server_private: true

  # constraints: |
  #   unique (project_id, user_id)


functions: |
  CREATE extension IF NOT EXISTS pg_hashids;

  CREATE OR REPLACE FUNCTION hashid(BIGINT) RETURNS TEXT
  AS \$$
    SELECT id_encode(\$1, '$HASHID_SALT', $HASHID_MIN_LENGTH, '$HASHID_ALPHABET');
  \$$ LANGUAGE sql;

  CREATE OR REPLACE FUNCTION unhashid(TEXT) RETURNS BIGINT
  AS \$$
    SELECT id_decode_once(\$1, '$HASHID_SALT', $HASHID_MIN_LENGTH, '$HASHID_ALPHABET');
  \$$ LANGUAGE sql;


universal:
  id:
    type: primary
    read_only: true
    server_private: true
  date_created:
    type: timestamptz
    required: true
    read_only: true
    server_private: true
    functions: |
      CREATE OR REPLACE FUNCTION trigger_set_created() RETURNS TRIGGER
      AS \$$
      BEGIN
        NEW.date_created = NOW();
        NEW.date_updated = NOW();
        RETURN NEW;
      END;
      \$$ LANGUAGE plpgsql;
    triggers: |
      CREATE TRIGGER set_created_for_{0}
      BEFORE INSERT ON {0}
      FOR EACH ROW
      EXECUTE PROCEDURE trigger_set_created();

  date_updated:
    type: timestamptz
    required: true
    read_only: true
    server_private: true
    functions: |
      CREATE OR REPLACE FUNCTION trigger_set_updated() RETURNS TRIGGER
      AS \$$
      BEGIN
        NEW.date_updated = NOW();
        RETURN NEW;
      END;
      \$$ LANGUAGE plpgsql;
    triggers: |
      CREATE TRIGGER set_updated_for_{0}
      BEFORE UPDATE ON {0}
      FOR EACH ROW
      EXECUTE PROCEDURE trigger_set_updated();

  slug:
    type: text
    required: true
    read_only: true
    private: true
    functions: |
      CREATE OR REPLACE FUNCTION default_slug() RETURNS trigger
      AS \$$
      BEGIN
        NEW.slug := hashid(NEW.id);
        RETURN NEW;
      END;
      \$$ LANGUAGE plpgsql;
    triggers: |
      CREATE TRIGGER _1_default_slug_for_{0}
      BEFORE INSERT ON {0}
      FOR EACH ROW
      EXECUTE PROCEDURE default_slug();

  url_slug:
    type: text
    required: true
    no_patch: true
    functions: |
      CREATE OR REPLACE FUNCTION default_url_slug() RETURNS trigger
      AS \$$
      BEGIN
        NEW.url_slug := NEW.slug;
        RETURN NEW;
      END;
      \$$ LANGUAGE plpgsql;
    triggers: |
      CREATE TRIGGER _2_default_url_slug_for_{0}
      BEFORE INSERT ON {0}
      FOR EACH ROW
      EXECUTE PROCEDURE default_url_slug();
