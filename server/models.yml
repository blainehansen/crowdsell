users:
  name: text
  email:
    type: text
    unique: true
    required: true
    private: true
  password:
    type: bytea
    required: true
    server_private: true
  profile_photo_slug:
    type: text
    no_patch: true
  forgot_password_token:
    type: bytea
    server_private: true

projects:
  name: text
  description: text
  user_id:
    type: bigint
    required: true
    references: users(id)
    server_private: true


functions: |
  CREATE extension IF NOT EXISTS pg_hashids;

  CREATE OR REPLACE FUNCTION hashid(BIGINT) RETURNS TEXT
  AS \$$
    SELECT id_encode(\$1, '$HASHID_SALT', $HASHID_MIN_LENGTH, '$HASHID_ALPHABET');
  \$$ LANGUAGE sql;

  CREATE OR REPLACE FUNCTION unhashid(TEXT) RETURNS BIGINT
  AS \$$
    SELECT id_decode_once(\$1, '$HASHID_SALT', $HASHID_MIN_LENGTH, '$HASHID_ALPHABET');
  \$$ LANGUAGE sql;


universal:
  id:
    type: primary
    server_private: true
  date_created:
    type: timestamptz
    server_private: true
    functions: |
      CREATE OR REPLACE FUNCTION trigger_set_created() RETURNS TRIGGER
      AS \$$
      BEGIN
        NEW.date_created = NOW();
        RETURN NEW;
      END;
      \$$ LANGUAGE plpgsql;
    triggers: |
      CREATE TRIGGER set_created_for_{0}
      BEFORE INSERT ON {0}
      FOR EACH ROW
      EXECUTE PROCEDURE trigger_set_created();

  date_updated:
    type: timestamptz
    server_private: true
    functions: |
      CREATE OR REPLACE FUNCTION trigger_set_updated() RETURNS TRIGGER
      AS \$$
      BEGIN
        NEW.date_updated = NOW();
        RETURN NEW;
      END;
      \$$ LANGUAGE plpgsql;
    triggers: |
      CREATE TRIGGER set_updated_for_{0}
      BEFORE UPDATE ON {0}
      FOR EACH ROW
      EXECUTE PROCEDURE trigger_set_updated();

  slug:
    type: text
    required: true
    no_patch: true
    private: true
  url_slug:
    type: text
    required: true
    no_patch: true
    functions: |
      CREATE OR REPLACE FUNCTION default_slug() RETURNS trigger
      AS \$$
      BEGIN
        NEW.slug := hashid(NEW.id);
        NEW.url_slug := NEW.slug;
        RETURN NEW;
      END;
      \$$ LANGUAGE plpgsql;
    triggers: |
      CREATE TRIGGER default_slug_for_{0}
      BEFORE INSERT ON {0}
      FOR EACH ROW
      EXECUTE PROCEDURE default_slug();
