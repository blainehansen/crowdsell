# export KUBECONFIG=.configs/k8s-cluster.yml
# kubectl config --kubeconfig=.configs/k8s-cluster.yml use-context do-sfo2-crowdsell

# kubectl apply -f .configs/.keys.db.yml -f .configs/.keys.docker.yml
# kubectl create configmap env.go --from-file=.env=.configs/.env.launch.dev.sh
# kubectl create secret generic keys.go --from-file=.keys=.configs/.keys.go.sh --from-file=.db-key=.configs/.keys.go-db.txt
# kubectl apply -f .configs/k8s-manifest.yml
# then psql into the database and apply the first root migration, which will use .keys.go-db.txt

# dev version
# kubectl create configmap env.go --from-file=.env=.configs/.env.launch.prod.sh

# this will ensure that the build fails if the deployment fails
# kubectl rollout status deployment/deployment-name

# envsubst < ${HOME}/project/k8s.yml > ${HOME}/patched_k8s.yml
# sed -e '/{{REPLACE}}/{r content.txt' -e 'd;}' template.txt

# go api
apiVersion: v1
kind: Service
metadata:
  name: crowdsell
  labels:
    app: crowdsell
spec:
  type: LoadBalancer
  selector:
    app: crowdsell
    tier: go-api
  ports:
  - port: 5050
    targetPort: 5050
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: go-api
  labels:
    app: crowdsell
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crowdsell
      tier: go-api
  template:
    metadata:
      labels:
        app: crowdsell
        tier: go-api
    spec:
      containers:
      - image: blainehansen/crowdsell
        imagePullPolicy: Always
        name: crowdsell-go
        ports:
        - containerPort: 5050

        volumeMounts:
        - name: keys
          mountPath: "/keys/"
          readOnly: true
        - name: env
          mountPath: "/env/"
          readOnly: true

      imagePullSecrets:
      - name: keys.docker

      volumes:
      - name: keys
        secret:
          secretName: keys.go
      - name: env
        configMap:
          name: env.go

# database
---
apiVersion: v1
kind: Service
metadata:
  name: database
  labels:
    app: crowdsell
spec:
  type: NodePort
  selector:
    app: crowdsell
    tier: database
  ports:
  - port: 5432
    targetPort: 5432
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: database
  labels:
    app: crowdsell
spec:
  replicas: 1
  selector:
    matchLabels:
      app: crowdsell
      tier: database
  template:
    metadata:
      labels:
        app: crowdsell
        tier: database
    spec:
      containers:
      - name: database
        image: postgres:11-alpine
        imagePullPolicy: "IfNotPresent"
        env:
        - name: POSTGRES_DB
          value: database
        - name: POSTGRES_USER
          valueFrom:
            secretKeyRef:
              name: keys.db
              key: POSTGRES_USER
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: keys.db
              key: POSTGRES_PASSWORD
        ports:
        - containerPort: 5432

        volumeMounts:
        - name: postgres-data-mount
          mountPath: /var/lib/postgresql

      volumes:
      - name: postgres-data-mount
        persistentVolumeClaim:
          claimName: postgres-data-pvc
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-data-pvc
spec:
  accessModes:
  - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
  storageClassName: do-block-storage
